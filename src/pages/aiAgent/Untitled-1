// ...existing imports...
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";

// ...existing code...

export default function IntentActionsMenu() {
    // ...existing state...

    // Drag & drop reorder
    const onDragEnd = (result) => {
        if (!result.destination) return;
        const reordered = Array.from(actions);
        const [removed] = reordered.splice(result.source.index, 1);
        reordered.splice(result.destination.index, 0, removed);
        setActions(reordered);
    };

    // Duplicate action
    const duplicateAction = (idx) => {
        setActions(prev => {
            const copy = { ...prev[idx], id: Date.now() };
            return [
                ...prev.slice(0, idx + 1),
                copy,
                ...prev.slice(idx + 1)
            ];
        });
    };

    // ...existing code...

    return (
        <div>
            <div className="md:flex justify-between">
                <h3 className="text-lg font-medium text-gray-900">Response Configuration</h3>
                <div>
                    <Button
                        variant="contained"
                        startIcon={<AddCircleOutlineIcon />}
                        onClick={handleOpenMenu}
                    >
                        Add Response
                    </Button>
                </div>
            </div>
            <div className="max-w-md mx-auto p-4 space-y-4">
                <DragDropContext onDragEnd={onDragEnd}>
                    <Droppable droppableId="actions-droppable">
                        {(provided) => (
                            <div {...provided.droppableProps} ref={provided.innerRef}>
                                {actions.map((action, idx) => (
                                    <Draggable key={action.id} draggableId={action.id.toString()} index={idx}>
                                        {(dragProvided, dragSnapshot) => (
                                            <div
                                                ref={dragProvided.innerRef}
                                                {...dragProvided.draggableProps}
                                                {...dragProvided.dragHandleProps}
                                                className={`relative p-4 border rounded-lg mb-3 cursor-pointer hover:bg-gray-100 bg-gray-50 border-gray-200 group transition-shadow ${dragSnapshot.isDragging ? "shadow-lg bg-blue-50" : ""}`}
                                            >
                                                {/* Delete cross on hover */}
                                                <div
                                                    className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-2"
                                                >
                                                    <span
                                                        onClick={() => duplicateAction(idx)}
                                                        title="Duplicate"
                                                        className="cursor-pointer hover:text-blue-600"
                                                    >
                                                        <SmartButtonIcon fontSize="small" />
                                                    </span>
                                                    <span
                                                        onClick={() => deleteAction(action.id)}
                                                        title="Delete"
                                                        className="cursor-pointer hover:text-red-600"
                                                    >
                                                        <CloseIcon fontSize="small" />
                                                    </span>
                                                </div>

                                                {/* ...existing card rendering code for text, image, video, apiCall, etc... */}
                                                {/* (copy your card rendering code here) */}
                                                {/* Example for text: */}
                                                {action.type === "text" && (
                                                    <>
                                                        <textarea
                                                            rows="1"
                                                            type="text"
                                                            placeholder="Type a message..."
                                                            value={action.content}
                                                            onChange={(e) => updateActionContent(action.id, e.target.value)}
                                                            className="w-full px-3 py-2 border border-none rounded-lg focus:outline-none focus:ring-1 focus:ring-gray-200"
                                                        />
                                                        <div className="bg-gray-50 rounded-xl p-3 space-y-2">
                                                            {action.buttons.map((btn) => (
                                                                <Button
                                                                    key={btn.id}
                                                                    variant="outlined"
                                                                    fullWidth
                                                                    onClick={() => handleEditButton(action.id, btn)}
                                                                >
                                                                    {btn.label}
                                                                </Button>
                                                            ))}
                                                            <Button
                                                                variant="text"
                                                                fullWidth
                                                                onClick={() => addButtonToAction(action.id)}
                                                            >
                                                                + Add Button
                                                            </Button>
                                                        </div>
                                                    </>
                                                )}
                                                {/* ...other types... */}
                                                {/* (copy your card rendering code for image, video, apiCall, etc.) */}
                                                {/* ...existing code... */}
                                            </div>
                                        )}
                                    </Draggable>
                                ))}
                                {provided.placeholder}
                            </div>
                        )}
                    </Droppable>
                </DragDropContext>
            </div>
            {/* ...existing menus, drawers, modals... */}
        </div>
    );
}